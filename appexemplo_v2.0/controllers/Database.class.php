<?php

use api_controllers\Acesso_user_menuAPI;
use PHPMailer\PHPMailer\Exception;

/**
 * System generated by SysGen (System Generator with Formdin Framework) 
 * Download SysGen: https://github.com/bjverde/sysgen
 * Download Formdin Framework: https://github.com/bjverde/formDin
 * 
 * SysGen  Version: 1.9.0-alpha
 * FormDin Version: 4.7.5-alpha
 * 
 * System appev2 created in: 2019-09-01 16:03:51
 */
class Database
{
    private $dao = null;

    public function __construct()
    {
        $this->dao = new DatabaseDAO();
    }
    public function getDao()
    {
        return $this->dao;
    }
    public function setDao($dao)
    {
        $this->dao = $dao;
    }
    //--------------------------------------------------------------------------------
    public function showMultiplos()
    {
        $dados = $this->dao->selectAll( null, null );
        echo('<h1>SqLite</h1>');
        var_dump($dados);
        echo('<hr>');

        $controllersMarca = new Marca();
        $dados = $controllersMarca->selectAll();
        echo('<h1>MySql</h1>');
        var_dump($dados);
        echo('<hr>');

        $dao = new DatabaseDAO();
        $this->setDao($dao);
        $dados = $this->dao->selectAll( null, null );
        echo('<h1>SqLite</h1>');
        var_dump($dados);
        echo('<hr>');
        
        $controllersMarca = new Marca();
        $dados = $controllersMarca->selectAll();
        echo('<h1>MySql</h1>');
        var_dump($dados);
        echo('<hr>');
    }
    //--------------------------------------------------------------------------------
    public function commit()
    {
        $tpdo = New TPDOConnectionObj();
        try{            
            $tpdo->beginTransaction();
            $objUserVO = new Acesso_userVO();
            $objUser = new acesso_user();
            $daoUser = $objUser->getDao();
            $daoUser->setTPDOConnection($tpdo);
            $objUser->save($objUserVO);

            $objUserPerfil = new Acesso_user_menu();
            $objUserPerfil->getDao()->setTPDOConnection($tpdo);
            
            $tpdo->commit();
            return $result;
        }
        catch (Exception $e) {
            $tpdo->rollBack();
            MessageHelper::logRecord($e);
            throw new Exception($e);
        }        
    }
    //--------------------------------------------------------------------------------
    public function rollBack()
    {
        $tpdo = New TPDOConnectionObj();
        try{            
            $tpdo->beginTransaction();
            $result = $this->dao->delete( $id );
            $tpdo->commit();
            return $result;
        }
        catch (Exception $e) {
            $tpdo->rollBack();
            MessageHelper::logRecord($e);
            throw new Exception($e);
        } 
    }
}
?>